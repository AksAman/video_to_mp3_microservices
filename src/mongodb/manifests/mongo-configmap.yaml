# db.auth(process.env.MONGO_INITDB_ROOT_USERNAME, process.env.MONGO_INITDB_ROOT_PASSWORD)
# mongosh -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase admin
kind: ConfigMap
apiVersion: v1
metadata:
  name: vmp3-mongo-configmap
  namespace: default
data:
  ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
  ensure-users.js: |
    const targetDbStr = 'test';
    const rootUser = process.env.MONGO_INITDB_ROOT_USERNAME;
    const rootPass = process.env.MONGO_INITDB_ROOT_PASSWORD;
    const usersStr = process.env.MONGO_USERS_LIST;

    const adminDb = db.getSiblingDB('admin');
    adminDb.auth(rootUser, rootPass);
    console.log('USER:SCRIPT:Successfully authenticated admin user');

    const targetDb = db.getSiblingDB(targetDbStr);
    console.log('USER:SCRIPT:Successfully connected to target database', targetDbStr, targetDb);
    console.log('USER:SCRIPT:usersStr', usersStr);

    usersStr
        .trim()
        .split(';')
        .map(s => s.split(':'))
        .forEach(user => {
            const username = user[0];
            const rolesStr = user[1];
            const password = user[2];

            console.log("USER:SCRIPT:", username, rolesStr, password);

            if (!rolesStr || !password) {
                return;
            }

            const roles = rolesStr.split(',');
            const userDoc = {
                user: username,
                pwd: password,
            };

            userDoc.roles = roles.map(role => {
              return { role: role, db: 'admin' };
            });

            console.log('USER:SCRIPT:Creating user', userDoc);

            try {
                targetDb.createUser(userDoc);
                console.log('USER:SCRIPT:Successfully created user', userDoc);
            } catch (err) {
                if (!~err.message.toLowerCase().indexOf('duplicate')) {
                    console.error("USER:SCRIPT:Error creating user", err);
                    throw err;
                }
            }
        });
